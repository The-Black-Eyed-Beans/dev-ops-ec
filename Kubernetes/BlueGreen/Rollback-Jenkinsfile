pipeline {
    agent any
    
    parameters{
        string(name: 'MICROSERVICE', defaultValue: 'bank', description: 'Microservice you are rolling back')
    }

    stages {
        stage("Get current state of deployment") {
            steps {
                script {
                    def bank_output = sh(returnStdout: true, script: "kubectl get service aline-backend-service -o yaml -n afs-ec | grep 'targetPort: bank'")
                    if(bank_output.contains("green")){
                        env.BANK_DEPLOYMENT_COLOR = "green"
                    }else{
                        env.BANK_DEPLOYMENT_COLOR = "blue"
                    }

                    def trans_output = sh(returnStdout: true, script: "kubectl get service aline-backend-service -o yaml -n afs-ec | grep 'targetPort: trans'")
                    if(trans_output.contains("green")){
                        env.TRANS_DEPLOYMENT_COLOR = "green"
                    }else{
                        env.TRANS_DEPLOYMENT_COLOR = "blue"
                    }

                    def under_output = sh(returnStdout: true, script: "kubectl get service aline-backend-service -o yaml -n afs-ec | grep 'targetPort: under'")
                    if(under_output.contains("green")){
                        env.UNDER_DEPLOYMENT_COLOR = "green"
                    }else{
                        env.UNDER_DEPLOYMENT_COLOR = "blue"
                    }

                    def user_output = sh(returnStdout: true, script: "kubectl get service aline-backend-service -o yaml -n afs-ec | grep 'targetPort: user'")
                    if(user_output.contains("green")){
                        env.USER_DEPLOYMENT_COLOR = "green"
                    }else{
                        env.USER_DEPLOYMENT_COLOR = "blue"
                    }

                    if(env.microservice == "bank"){
                        echo "${BANK_DEPLOYMENT_COLOR}"
                    }
                }
            }
        }
    }
}