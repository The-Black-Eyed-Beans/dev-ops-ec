pipeline {
    agent any

    stages {
        stage("Get current state of deployment") {
            steps {
                script {
                    def output = sh(returnStdout: true, script: "kubectl get service -n afs-ec")
                    if(output.contains("green") && output.contains("blue")){
                        env.DEPLOYMENT_STATE = "both"
                        def ingress_output = sh(returnStdout: true, script: "kubectl get ingress main-ingress -o yaml -n afs-ec")
                        if(ingress_output.contains("blue")){
                            env.MAIN_COLOR = "green"
                            env.PREV_COLOR = "blue"
                        }else if(ingress_output.contains("green")){
                            env.MAIN_COLOR = "blue"
                            env.PREV_COLOR = "green"
                        }else{
                            echo "Error: Services were running but no ingress was created"
                            return
                        }
                    }else if(output.contains("green")){
                        env.DEPLOYMENT_STATE = "one"
                        env.MAIN_COLOR = "blue"
                        env.PREV_COLOR = "green"
                    }else if(output.contains("blue")){
                        env.DEPLOYMENT_STATE = "one"
                        env.MAIN_COLOR = "green"
                        env.PREV_COLOR = "blue"
                    }else{
                        echo "No deployments running so therefore no need to rollback"
                        return
                    }
                }
            }
        }

        stage("Rollback to previous deployment") {
            when {
                environment(name: "DEPLOYMENT_STATE", value: "both")
            }
            steps{
                dir('Kubernetes/BlueGreen'){
                    sh "envsubst < main-ingress.yaml | kubectl apply -f -"
                }
            }
        }

        stage("Delete unused ingress") {
            when {
                environment(name: "DEPLOYMENT_STATE", value: "both")
            }
            steps{
                sh "kubectl delete ingress main-ingress -n afs-ec"
            }
        }

        stage("Delete infrastructure from rolled-back deployment"){
            steps{
                dir('Kubernetes/BlueGreen'){
                    sh "kubectl delete deploy aline-bank-deployment-${PREV_COLOR} -n afs-ec"
                    sh "kubectl delete deploy aline-gateway-deployment-${PREV_COLOR} -n afs-ec"
                    sh "kubectl delete service aline-backend-service-${PREV_COLOR} -n afs-ec"
                    sh "kubectl delete service aline-gateway-service-${PREV_COLOR} -n afs-ec"
                }  
            }
        }
    }
}