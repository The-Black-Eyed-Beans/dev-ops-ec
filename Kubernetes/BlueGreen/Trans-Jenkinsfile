pipeline {
    agent any
    
    parameters{
        string(name: 'SLEEP_AMOUNT', defaultValue: '10', description: 'How long to sleep before testing deployment')
    }

    environment {
        AWS_REGION = credentials("AWS_REGION")
        AWS_ID = credentials("AWS_ID")
        COMMIT_HASH = "latest"
        TRANS_REPLICAS = 1
        HOST = "localhost"
        HOST_PORT = "30020"
    }

    stages {
        stage("Get current state of deployment") {
            steps {
                script {
                    def output = sh(returnStdout: true, script: "kubectl get deploy -n afs-ec")
                    if(output.contains("trans-deployment-green") && output.contains("trans-deployment-blue")){
                        def trans_output = sh(returnStdout: true, script: "kubectl get service aline-backend-service -o yaml -n afs-ec | grep 'targetPort: trans'")
                        if(trans_output.contains("blue")){
                            env.DEPLOYMENT_COLOR = "green"
                            env.TRANS_DEPLOYMENT_COLOR = "green"
                        }else if(trans_output.contains("green")){
                            env.DEPLOYMENT_COLOR = "blue"
                            env.TRANS_DEPLOYMENT_COLOR = "blue"
                        }else{
                            error "Error: Backend service not currently running"
                        }
                    }else if(output.contains("trans-deployment-green")){
                        env.DEPLOYMENT_COLOR = "blue"
                        env.TRANS_DEPLOYMENT_COLOR = "blue"
                    }else if(output.contains("trans-deployment-blue")){
                        env.DEPLOYMENT_COLOR = "green"
                        env.TRANS_DEPLOYMENT_COLOR = "green"
                    }else{
                        env.DEPLOYMENT_COLOR = "blue"
                        env.TRANS_DEPLOYMENT_COLOR = "blue"
                    }

                    def bank_output = sh(returnStdout: true, script: "kubectl get service aline-backend-service -o yaml -n afs-ec | grep 'targetPort: bank'")
                    if(bank_output.contains("green")){
                        env.BANK_DEPLOYMENT_COLOR = "green"
                    }else{
                        env.BANK_DEPLOYMENT_COLOR = "blue"
                    }

                    def under_output = sh(returnStdout: true, script: "kubectl get service aline-backend-service -o yaml -n afs-ec | grep 'targetPort: under'")
                    if(under_output.contains("green")){
                        env.UNDER_DEPLOYMENT_COLOR = "green"
                    }else{
                        env.UNDER_DEPLOYMENT_COLOR = "blue"
                    }

                    def user_output = sh(returnStdout: true, script: "kubectl get service aline-backend-service -o yaml -n afs-ec | grep 'targetPort: user'")
                    if(user_output.contains("green")){
                        env.USER_DEPLOYMENT_COLOR = "green"
                    }else{
                        env.USER_DEPLOYMENT_COLOR = "blue"
                    }
                }
            }
        }

        stage("Create trans deployment and update service") {
            steps {
                dir('Kubernetes/BlueGreen'){
                    sh "envsubst < aline-trans.yaml | kubectl apply -f -"
                    sh "envsubst < backend-service.yaml | kubectl apply -f -"
                }
            }
        }

        stage("Test deployment"){
            steps{
                script {
                    sh "sleep ${SLEEP_AMOUNT}"
                    final def (String response, int code) = sh(script: "curl -s -w '\\n%{response_code}' ${HOST}:${HOST_PORT}/api/accounts/2/transactions", returnStdout: true).trim().tokenize("\n")
                    if(code == 403){
                        echo "Test passed"
                    }else{
                        build job: 'Blue-Green-Rollback', parameters: [
                        string(name: 'MICROSERVICE', value: "trans")
                        ]
                    }
                }
            }
        }
    }
}